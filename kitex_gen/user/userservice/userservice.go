// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"douyin/kitex_gen/user"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":     kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"CheckUser":      kitex.NewMethodInfo(checkUserHandler, newUserServiceCheckUserArgs, newUserServiceCheckUserResult, false),
		"QueryCurUser":   kitex.NewMethodInfo(queryCurUserHandler, newUserServiceQueryCurUserArgs, newUserServiceQueryCurUserResult, false),
		"QueryOtherUser": kitex.NewMethodInfo(queryOtherUserHandler, newUserServiceQueryOtherUserArgs, newUserServiceQueryOtherUserResult, false),
		"IsUserExisted":  kitex.NewMethodInfo(isUserExistedHandler, newUserServiceIsUserExistedArgs, newUserServiceIsUserExistedResult, false),
		"MultiQueryUser": kitex.NewMethodInfo(multiQueryUserHandler, newUserServiceMultiQueryUserArgs, newUserServiceMultiQueryUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCreateUserArgs)
	realResult := result.(*user.UserServiceCreateUserResult)
	success, err := handler.(user.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return user.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return user.NewUserServiceCreateUserResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCheckUserArgs)
	realResult := result.(*user.UserServiceCheckUserResult)
	success, err := handler.(user.UserService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserArgs() interface{} {
	return user.NewUserServiceCheckUserArgs()
}

func newUserServiceCheckUserResult() interface{} {
	return user.NewUserServiceCheckUserResult()
}

func queryCurUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceQueryCurUserArgs)
	realResult := result.(*user.UserServiceQueryCurUserResult)
	success, err := handler.(user.UserService).QueryCurUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryCurUserArgs() interface{} {
	return user.NewUserServiceQueryCurUserArgs()
}

func newUserServiceQueryCurUserResult() interface{} {
	return user.NewUserServiceQueryCurUserResult()
}

func queryOtherUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceQueryOtherUserArgs)
	realResult := result.(*user.UserServiceQueryOtherUserResult)
	success, err := handler.(user.UserService).QueryOtherUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryOtherUserArgs() interface{} {
	return user.NewUserServiceQueryOtherUserArgs()
}

func newUserServiceQueryOtherUserResult() interface{} {
	return user.NewUserServiceQueryOtherUserResult()
}

func isUserExistedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceIsUserExistedArgs)
	realResult := result.(*user.UserServiceIsUserExistedResult)
	success, err := handler.(user.UserService).IsUserExisted(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceIsUserExistedArgs() interface{} {
	return user.NewUserServiceIsUserExistedArgs()
}

func newUserServiceIsUserExistedResult() interface{} {
	return user.NewUserServiceIsUserExistedResult()
}

func multiQueryUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMultiQueryUserArgs)
	realResult := result.(*user.UserServiceMultiQueryUserResult)
	success, err := handler.(user.UserService).MultiQueryUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMultiQueryUserArgs() interface{} {
	return user.NewUserServiceMultiQueryUserArgs()
}

func newUserServiceMultiQueryUserResult() interface{} {
	return user.NewUserServiceMultiQueryUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args user.UserServiceCreateUserArgs
	_args.Req = req
	var _result user.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *user.DouyinUserLoginRequest) (r *user.DouyinUserLoginResponse, err error) {
	var _args user.UserServiceCheckUserArgs
	_args.Req = req
	var _result user.UserServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCurUser(ctx context.Context, req *user.DouyinUserRequest) (r *user.DouyinUserResponse, err error) {
	var _args user.UserServiceQueryCurUserArgs
	_args.Req = req
	var _result user.UserServiceQueryCurUserResult
	if err = p.c.Call(ctx, "QueryCurUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryOtherUser(ctx context.Context, req *user.DouyinQueryUserRequest) (r *user.DouyinUserResponse, err error) {
	var _args user.UserServiceQueryOtherUserArgs
	_args.Req = req
	var _result user.UserServiceQueryOtherUserResult
	if err = p.c.Call(ctx, "QueryOtherUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsUserExisted(ctx context.Context, req *user.DouyinUserExistRequest) (r *user.DouyinUserExistResponse, err error) {
	var _args user.UserServiceIsUserExistedArgs
	_args.Req = req
	var _result user.UserServiceIsUserExistedResult
	if err = p.c.Call(ctx, "IsUserExisted", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MultiQueryUser(ctx context.Context, req *user.DouyinMqueryUserRequest) (r *user.DouyinMqueryUserResponse, err error) {
	var _args user.UserServiceMultiQueryUserArgs
	_args.Req = req
	var _result user.UserServiceMultiQueryUserResult
	if err = p.c.Call(ctx, "MultiQueryUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
