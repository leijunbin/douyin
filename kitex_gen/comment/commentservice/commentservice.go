// Code generated by Kitex v0.3.1. DO NOT EDIT.

package commentservice

import (
	"context"
	"douyin/kitex_gen/comment"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateComment":      kitex.NewMethodInfo(createCommentHandler, newCommentServiceCreateCommentArgs, newCommentServiceCreateCommentResult, false),
		"DeleteComment":      kitex.NewMethodInfo(deleteCommentHandler, newCommentServiceDeleteCommentArgs, newCommentServiceDeleteCommentResult, false),
		"QueryComments":      kitex.NewMethodInfo(queryCommentsHandler, newCommentServiceQueryCommentsArgs, newCommentServiceQueryCommentsResult, false),
		"QueryCommentNumber": kitex.NewMethodInfo(queryCommentNumberHandler, newCommentServiceQueryCommentNumberArgs, newCommentServiceQueryCommentNumberResult, false),
		"CreateCommentIndex": kitex.NewMethodInfo(createCommentIndexHandler, newCommentServiceCreateCommentIndexArgs, newCommentServiceCreateCommentIndexResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCreateCommentArgs)
	realResult := result.(*comment.CommentServiceCreateCommentResult)
	success, err := handler.(comment.CommentService).CreateComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCreateCommentArgs() interface{} {
	return comment.NewCommentServiceCreateCommentArgs()
}

func newCommentServiceCreateCommentResult() interface{} {
	return comment.NewCommentServiceCreateCommentResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceDeleteCommentArgs)
	realResult := result.(*comment.CommentServiceDeleteCommentResult)
	success, err := handler.(comment.CommentService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceDeleteCommentArgs() interface{} {
	return comment.NewCommentServiceDeleteCommentArgs()
}

func newCommentServiceDeleteCommentResult() interface{} {
	return comment.NewCommentServiceDeleteCommentResult()
}

func queryCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceQueryCommentsArgs)
	realResult := result.(*comment.CommentServiceQueryCommentsResult)
	success, err := handler.(comment.CommentService).QueryComments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceQueryCommentsArgs() interface{} {
	return comment.NewCommentServiceQueryCommentsArgs()
}

func newCommentServiceQueryCommentsResult() interface{} {
	return comment.NewCommentServiceQueryCommentsResult()
}

func queryCommentNumberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceQueryCommentNumberArgs)
	realResult := result.(*comment.CommentServiceQueryCommentNumberResult)
	success, err := handler.(comment.CommentService).QueryCommentNumber(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceQueryCommentNumberArgs() interface{} {
	return comment.NewCommentServiceQueryCommentNumberArgs()
}

func newCommentServiceQueryCommentNumberResult() interface{} {
	return comment.NewCommentServiceQueryCommentNumberResult()
}

func createCommentIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCreateCommentIndexArgs)
	realResult := result.(*comment.CommentServiceCreateCommentIndexResult)
	success, err := handler.(comment.CommentService).CreateCommentIndex(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCreateCommentIndexArgs() interface{} {
	return comment.NewCommentServiceCreateCommentIndexArgs()
}

func newCommentServiceCreateCommentIndexResult() interface{} {
	return comment.NewCommentServiceCreateCommentIndexResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateComment(ctx context.Context, req *comment.CreateCommentRequest) (r *comment.CreateCommentResponse, err error) {
	var _args comment.CommentServiceCreateCommentArgs
	_args.Req = req
	var _result comment.CommentServiceCreateCommentResult
	if err = p.c.Call(ctx, "CreateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *comment.DeleteCommentRequest) (r *comment.DeleteCommentResponse, err error) {
	var _args comment.CommentServiceDeleteCommentArgs
	_args.Req = req
	var _result comment.CommentServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryComments(ctx context.Context, req *comment.QueryCommentsRequest) (r *comment.QueryCommentsResponse, err error) {
	var _args comment.CommentServiceQueryCommentsArgs
	_args.Req = req
	var _result comment.CommentServiceQueryCommentsResult
	if err = p.c.Call(ctx, "QueryComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryCommentNumber(ctx context.Context, req *comment.QueryCommentNumberRequest) (r *comment.QueryCommentNumberResponse, err error) {
	var _args comment.CommentServiceQueryCommentNumberArgs
	_args.Req = req
	var _result comment.CommentServiceQueryCommentNumberResult
	if err = p.c.Call(ctx, "QueryCommentNumber", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCommentIndex(ctx context.Context, req *comment.CreateCommentIndexRequset) (r *comment.CreateCommentIndexResponse, err error) {
	var _args comment.CommentServiceCreateCommentIndexArgs
	_args.Req = req
	var _result comment.CommentServiceCreateCommentIndexResult
	if err = p.c.Call(ctx, "CreateCommentIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
